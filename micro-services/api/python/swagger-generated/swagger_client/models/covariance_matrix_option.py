# coding: utf-8

"""
    QES Quant Service API

    QES Quant Service API provides easy access to Risk/Optimization API   # noqa: E501

    OpenAPI spec version: 0.0.4
    Contact: luo.qes@wolferesearch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CovarianceMatrixOption(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'interval': 'int',
        'cov_period': 'int',
        'var_period': 'int',
        'shirinkage_intensity': 'float'
    }

    attribute_map = {
        'interval': 'interval',
        'cov_period': 'cov.period',
        'var_period': 'var.period',
        'shirinkage_intensity': 'shirinkageIntensity'
    }

    def __init__(self, interval=None, cov_period=None, var_period=None, shirinkage_intensity=None):  # noqa: E501
        """CovarianceMatrixOption - a model defined in Swagger"""  # noqa: E501

        self._interval = None
        self._cov_period = None
        self._var_period = None
        self._shirinkage_intensity = None
        self.discriminator = None

        if interval is not None:
            self.interval = interval
        if cov_period is not None:
            self.cov_period = cov_period
        if var_period is not None:
            self.var_period = var_period
        if shirinkage_intensity is not None:
            self.shirinkage_intensity = shirinkage_intensity

    @property
    def interval(self):
        """Gets the interval of this CovarianceMatrixOption.  # noqa: E501


        :return: The interval of this CovarianceMatrixOption.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this CovarianceMatrixOption.


        :param interval: The interval of this CovarianceMatrixOption.  # noqa: E501
        :type: int
        """
        if interval is not None and interval > 1000:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value less than or equal to `1000`")  # noqa: E501
        if interval is not None and interval < 1:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must be a value greater than or equal to `1`")  # noqa: E501

        self._interval = interval

    @property
    def cov_period(self):
        """Gets the cov_period of this CovarianceMatrixOption.  # noqa: E501


        :return: The cov_period of this CovarianceMatrixOption.  # noqa: E501
        :rtype: int
        """
        return self._cov_period

    @cov_period.setter
    def cov_period(self, cov_period):
        """Sets the cov_period of this CovarianceMatrixOption.


        :param cov_period: The cov_period of this CovarianceMatrixOption.  # noqa: E501
        :type: int
        """
        if cov_period is not None and cov_period > 5000:  # noqa: E501
            raise ValueError("Invalid value for `cov_period`, must be a value less than or equal to `5000`")  # noqa: E501
        if cov_period is not None and cov_period < 32:  # noqa: E501
            raise ValueError("Invalid value for `cov_period`, must be a value greater than or equal to `32`")  # noqa: E501

        self._cov_period = cov_period

    @property
    def var_period(self):
        """Gets the var_period of this CovarianceMatrixOption.  # noqa: E501


        :return: The var_period of this CovarianceMatrixOption.  # noqa: E501
        :rtype: int
        """
        return self._var_period

    @var_period.setter
    def var_period(self, var_period):
        """Sets the var_period of this CovarianceMatrixOption.


        :param var_period: The var_period of this CovarianceMatrixOption.  # noqa: E501
        :type: int
        """
        if var_period is not None and var_period > 5000:  # noqa: E501
            raise ValueError("Invalid value for `var_period`, must be a value less than or equal to `5000`")  # noqa: E501
        if var_period is not None and var_period < 32:  # noqa: E501
            raise ValueError("Invalid value for `var_period`, must be a value greater than or equal to `32`")  # noqa: E501

        self._var_period = var_period

    @property
    def shirinkage_intensity(self):
        """Gets the shirinkage_intensity of this CovarianceMatrixOption.  # noqa: E501


        :return: The shirinkage_intensity of this CovarianceMatrixOption.  # noqa: E501
        :rtype: float
        """
        return self._shirinkage_intensity

    @shirinkage_intensity.setter
    def shirinkage_intensity(self, shirinkage_intensity):
        """Sets the shirinkage_intensity of this CovarianceMatrixOption.


        :param shirinkage_intensity: The shirinkage_intensity of this CovarianceMatrixOption.  # noqa: E501
        :type: float
        """
        if shirinkage_intensity is not None and shirinkage_intensity > 1:  # noqa: E501
            raise ValueError("Invalid value for `shirinkage_intensity`, must be a value less than or equal to `1`")  # noqa: E501
        if shirinkage_intensity is not None and shirinkage_intensity < 0:  # noqa: E501
            raise ValueError("Invalid value for `shirinkage_intensity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._shirinkage_intensity = shirinkage_intensity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CovarianceMatrixOption, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CovarianceMatrixOption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
