# coding: utf-8

"""
    QES Quant Service API

    QES Quant Service API provides easy access to Risk/Optimization API   # noqa: E501

    OpenAPI spec version: 0.0.4
    Contact: luo.qes@wolferesearch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PortfolioModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'uploadedby': 'str',
        'uploadedtime': 'str'
    }

    attribute_map = {
        'id': 'ID',
        'uploadedby': 'UPLOADEDBY',
        'uploadedtime': 'UPLOADEDTIME'
    }

    def __init__(self, id=None, uploadedby=None, uploadedtime=None):  # noqa: E501
        """PortfolioModel - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._uploadedby = None
        self._uploadedtime = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if uploadedby is not None:
            self.uploadedby = uploadedby
        if uploadedtime is not None:
            self.uploadedtime = uploadedtime

    @property
    def id(self):
        """Gets the id of this PortfolioModel.  # noqa: E501

        Portfolio Name  # noqa: E501

        :return: The id of this PortfolioModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PortfolioModel.

        Portfolio Name  # noqa: E501

        :param id: The id of this PortfolioModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def uploadedby(self):
        """Gets the uploadedby of this PortfolioModel.  # noqa: E501

        Associated User  # noqa: E501

        :return: The uploadedby of this PortfolioModel.  # noqa: E501
        :rtype: str
        """
        return self._uploadedby

    @uploadedby.setter
    def uploadedby(self, uploadedby):
        """Sets the uploadedby of this PortfolioModel.

        Associated User  # noqa: E501

        :param uploadedby: The uploadedby of this PortfolioModel.  # noqa: E501
        :type: str
        """

        self._uploadedby = uploadedby

    @property
    def uploadedtime(self):
        """Gets the uploadedtime of this PortfolioModel.  # noqa: E501

        Date on which portoflio file was uploaded  # noqa: E501

        :return: The uploadedtime of this PortfolioModel.  # noqa: E501
        :rtype: str
        """
        return self._uploadedtime

    @uploadedtime.setter
    def uploadedtime(self, uploadedtime):
        """Sets the uploadedtime of this PortfolioModel.

        Date on which portoflio file was uploaded  # noqa: E501

        :param uploadedtime: The uploadedtime of this PortfolioModel.  # noqa: E501
        :type: str
        """

        self._uploadedtime = uploadedtime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortfolioModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortfolioModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
