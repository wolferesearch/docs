# coding: utf-8

"""
    QES Quant Service API

    QES Quant Service API provides easy access to Risk/Optimization API   # noqa: E501

    OpenAPI spec version: 0.0.4
    Contact: luo.qes@wolferesearch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OptimizationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'portfolio': 'str',
        'template': 'str',
        'start_date': 'str',
        'end_date': 'str',
        'freq': 'str',
        'benchmark': 'str',
        'transaction_cost': 'float'
    }

    attribute_map = {
        'portfolio': 'portfolio',
        'template': 'template',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'freq': 'freq',
        'benchmark': 'benchmark',
        'transaction_cost': 'transaction_cost'
    }

    def __init__(self, portfolio=None, template=None, start_date=None, end_date=None, freq=None, benchmark=None, transaction_cost=None):  # noqa: E501
        """OptimizationRequest - a model defined in Swagger"""  # noqa: E501

        self._portfolio = None
        self._template = None
        self._start_date = None
        self._end_date = None
        self._freq = None
        self._benchmark = None
        self._transaction_cost = None
        self.discriminator = None

        if portfolio is not None:
            self.portfolio = portfolio
        if template is not None:
            self.template = template
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if freq is not None:
            self.freq = freq
        if benchmark is not None:
            self.benchmark = benchmark
        if transaction_cost is not None:
            self.transaction_cost = transaction_cost

    @property
    def portfolio(self):
        """Gets the portfolio of this OptimizationRequest.  # noqa: E501

        Mnemonic of the portfolio to be optimized  # noqa: E501

        :return: The portfolio of this OptimizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._portfolio

    @portfolio.setter
    def portfolio(self, portfolio):
        """Sets the portfolio of this OptimizationRequest.

        Mnemonic of the portfolio to be optimized  # noqa: E501

        :param portfolio: The portfolio of this OptimizationRequest.  # noqa: E501
        :type: str
        """

        self._portfolio = portfolio

    @property
    def template(self):
        """Gets the template of this OptimizationRequest.  # noqa: E501

        One of the previously defined templates for risk  # noqa: E501

        :return: The template of this OptimizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this OptimizationRequest.

        One of the previously defined templates for risk  # noqa: E501

        :param template: The template of this OptimizationRequest.  # noqa: E501
        :type: str
        """

        self._template = template

    @property
    def start_date(self):
        """Gets the start_date of this OptimizationRequest.  # noqa: E501

        Start date (yyyy-mm-dd)  # noqa: E501

        :return: The start_date of this OptimizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this OptimizationRequest.

        Start date (yyyy-mm-dd)  # noqa: E501

        :param start_date: The start_date of this OptimizationRequest.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this OptimizationRequest.  # noqa: E501

        End date (yyyy-mm-dd)  # noqa: E501

        :return: The end_date of this OptimizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this OptimizationRequest.

        End date (yyyy-mm-dd)  # noqa: E501

        :param end_date: The end_date of this OptimizationRequest.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def freq(self):
        """Gets the freq of this OptimizationRequest.  # noqa: E501

        Frequency of risk model generation  # noqa: E501

        :return: The freq of this OptimizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._freq

    @freq.setter
    def freq(self, freq):
        """Sets the freq of this OptimizationRequest.

        Frequency of risk model generation  # noqa: E501

        :param freq: The freq of this OptimizationRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["1me", "1m", "1d"]  # noqa: E501
        if freq not in allowed_values:
            raise ValueError(
                "Invalid value for `freq` ({0}), must be one of {1}"  # noqa: E501
                .format(freq, allowed_values)
            )

        self._freq = freq

    @property
    def benchmark(self):
        """Gets the benchmark of this OptimizationRequest.  # noqa: E501

        Benchmark for Tracking error optimization problem - Any of the standard universes and portfolios can be used - as benchmark. The caller should provide the benchmark - mnemonic, e.g., QES_EUROPE, QES_WORLD, SP500. System uses - the Float weighting as benchmark.  # noqa: E501

        :return: The benchmark of this OptimizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._benchmark

    @benchmark.setter
    def benchmark(self, benchmark):
        """Sets the benchmark of this OptimizationRequest.

        Benchmark for Tracking error optimization problem - Any of the standard universes and portfolios can be used - as benchmark. The caller should provide the benchmark - mnemonic, e.g., QES_EUROPE, QES_WORLD, SP500. System uses - the Float weighting as benchmark.  # noqa: E501

        :param benchmark: The benchmark of this OptimizationRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["QES_EUROPE", "QES_WORLD", "SP500"]  # noqa: E501
        if benchmark not in allowed_values:
            raise ValueError(
                "Invalid value for `benchmark` ({0}), must be one of {1}"  # noqa: E501
                .format(benchmark, allowed_values)
            )

        self._benchmark = benchmark

    @property
    def transaction_cost(self):
        """Gets the transaction_cost of this OptimizationRequest.  # noqa: E501

        Transaction cost  to consider in the optimization. - This is relevant for MVO optimization where transaction - cost is taken out from objective function. The transaction - cost is a quadratic function added based on value selected - For when the transaction_cost = 1, about 1 median spread - is estimated as the cost when 7% of ADV is participated, - for when transaction_cost = 5, 1 median spread cost is - estimated for when the participation is 3%. The per share - cost is linear and in objective function, the cost becomes - quadratic  # noqa: E501

        :return: The transaction_cost of this OptimizationRequest.  # noqa: E501
        :rtype: float
        """
        return self._transaction_cost

    @transaction_cost.setter
    def transaction_cost(self, transaction_cost):
        """Sets the transaction_cost of this OptimizationRequest.

        Transaction cost  to consider in the optimization. - This is relevant for MVO optimization where transaction - cost is taken out from objective function. The transaction - cost is a quadratic function added based on value selected - For when the transaction_cost = 1, about 1 median spread - is estimated as the cost when 7% of ADV is participated, - for when transaction_cost = 5, 1 median spread cost is - estimated for when the participation is 3%. The per share - cost is linear and in objective function, the cost becomes - quadratic  # noqa: E501

        :param transaction_cost: The transaction_cost of this OptimizationRequest.  # noqa: E501
        :type: float
        """
        if transaction_cost is not None and transaction_cost > 5:  # noqa: E501
            raise ValueError("Invalid value for `transaction_cost`, must be a value less than or equal to `5`")  # noqa: E501

        self._transaction_cost = transaction_cost

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OptimizationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptimizationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
