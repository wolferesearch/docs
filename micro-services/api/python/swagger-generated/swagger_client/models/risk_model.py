# coding: utf-8

"""
    QES Quant Service API

    QES Quant Service API provides easy access to Risk/Optimization API   # noqa: E501

    OpenAPI spec version: 0.0.4
    Contact: luo.qes@wolferesearch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RiskModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'template': 'str',
        'date_created': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'template': 'template',
        'date_created': 'dateCreated'
    }

    def __init__(self, uuid=None, template=None, date_created=None):  # noqa: E501
        """RiskModel - a model defined in Swagger"""  # noqa: E501

        self._uuid = None
        self._template = None
        self._date_created = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if template is not None:
            self.template = template
        if date_created is not None:
            self.date_created = date_created

    @property
    def uuid(self):
        """Gets the uuid of this RiskModel.  # noqa: E501

        Unique id of the risk model  # noqa: E501

        :return: The uuid of this RiskModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this RiskModel.

        Unique id of the risk model  # noqa: E501

        :param uuid: The uuid of this RiskModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def template(self):
        """Gets the template of this RiskModel.  # noqa: E501

        Template used for risk model  # noqa: E501

        :return: The template of this RiskModel.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this RiskModel.

        Template used for risk model  # noqa: E501

        :param template: The template of this RiskModel.  # noqa: E501
        :type: str
        """

        self._template = template

    @property
    def date_created(self):
        """Gets the date_created of this RiskModel.  # noqa: E501

        Date on which riks model was created  # noqa: E501

        :return: The date_created of this RiskModel.  # noqa: E501
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this RiskModel.

        Date on which riks model was created  # noqa: E501

        :param date_created: The date_created of this RiskModel.  # noqa: E501
        :type: str
        """

        self._date_created = date_created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RiskModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RiskModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
