# coding: utf-8

"""
    QES Quant Service API

    QES Quant Service API provides easy access to Risk/Optimization API   # noqa: E501

    OpenAPI spec version: 0.0.4
    Contact: luo.qes@wolferesearch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.covariance_matrix_option import CovarianceMatrixOption  # noqa: F401,E501
from swagger_client.models.factor_input import FactorInput  # noqa: F401,E501
from swagger_client.models.meta_input import MetaInput  # noqa: F401,E501
from swagger_client.models.risk_model_option import RiskModelOption  # noqa: F401,E501


class RiskModelTemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'factors': 'list[FactorInput]',
        'meta': 'list[MetaInput]',
        'options': 'RiskModelOption',
        'cov_args': 'CovarianceMatrixOption'
    }

    attribute_map = {
        'factors': 'factors',
        'meta': 'meta',
        'options': 'options',
        'cov_args': 'covArgs'
    }

    def __init__(self, factors=None, meta=None, options=None, cov_args=None):  # noqa: E501
        """RiskModelTemplate - a model defined in Swagger"""  # noqa: E501

        self._factors = None
        self._meta = None
        self._options = None
        self._cov_args = None
        self.discriminator = None

        if factors is not None:
            self.factors = factors
        if meta is not None:
            self.meta = meta
        if options is not None:
            self.options = options
        if cov_args is not None:
            self.cov_args = cov_args

    @property
    def factors(self):
        """Gets the factors of this RiskModelTemplate.  # noqa: E501

        List of factor mnemonics inputs  # noqa: E501

        :return: The factors of this RiskModelTemplate.  # noqa: E501
        :rtype: list[FactorInput]
        """
        return self._factors

    @factors.setter
    def factors(self, factors):
        """Sets the factors of this RiskModelTemplate.

        List of factor mnemonics inputs  # noqa: E501

        :param factors: The factors of this RiskModelTemplate.  # noqa: E501
        :type: list[FactorInput]
        """

        self._factors = factors

    @property
    def meta(self):
        """Gets the meta of this RiskModelTemplate.  # noqa: E501

        List of meta data mnemonics inputs  # noqa: E501

        :return: The meta of this RiskModelTemplate.  # noqa: E501
        :rtype: list[MetaInput]
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this RiskModelTemplate.

        List of meta data mnemonics inputs  # noqa: E501

        :param meta: The meta of this RiskModelTemplate.  # noqa: E501
        :type: list[MetaInput]
        """

        self._meta = meta

    @property
    def options(self):
        """Gets the options of this RiskModelTemplate.  # noqa: E501


        :return: The options of this RiskModelTemplate.  # noqa: E501
        :rtype: RiskModelOption
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this RiskModelTemplate.


        :param options: The options of this RiskModelTemplate.  # noqa: E501
        :type: RiskModelOption
        """

        self._options = options

    @property
    def cov_args(self):
        """Gets the cov_args of this RiskModelTemplate.  # noqa: E501


        :return: The cov_args of this RiskModelTemplate.  # noqa: E501
        :rtype: CovarianceMatrixOption
        """
        return self._cov_args

    @cov_args.setter
    def cov_args(self, cov_args):
        """Sets the cov_args of this RiskModelTemplate.


        :param cov_args: The cov_args of this RiskModelTemplate.  # noqa: E501
        :type: CovarianceMatrixOption
        """

        self._cov_args = cov_args

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RiskModelTemplate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RiskModelTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
