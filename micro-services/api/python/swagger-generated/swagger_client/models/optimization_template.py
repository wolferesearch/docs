# coding: utf-8

"""
    QES Quant Service API

    QES Quant Service API provides easy access to Risk/Optimization API   # noqa: E501

    OpenAPI spec version: 0.0.4
    Contact: luo.qes@wolferesearch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OptimizationTemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_risk': 'float',
        'bound': 'list[float]',
        'max_adv_participation': 'float',
        'max_turonver': 'float',
        'gross_weight': 'float',
        'net_weight': 'float',
        'objective': 'str',
        '_lambda': 'float'
    }

    attribute_map = {
        'target_risk': 'target_risk',
        'bound': 'bound',
        'max_adv_participation': 'max_ADV_participation',
        'max_turonver': 'max_turonver',
        'gross_weight': 'gross_weight',
        'net_weight': 'net_weight',
        'objective': 'objective',
        '_lambda': 'lambda'
    }

    def __init__(self, target_risk=None, bound=None, max_adv_participation=None, max_turonver=None, gross_weight=None, net_weight=None, objective=None, _lambda=None):  # noqa: E501
        """OptimizationTemplate - a model defined in Swagger"""  # noqa: E501

        self._target_risk = None
        self._bound = None
        self._max_adv_participation = None
        self._max_turonver = None
        self._gross_weight = None
        self._net_weight = None
        self._objective = None
        self.__lambda = None
        self.discriminator = None

        if target_risk is not None:
            self.target_risk = target_risk
        if bound is not None:
            self.bound = bound
        if max_adv_participation is not None:
            self.max_adv_participation = max_adv_participation
        if max_turonver is not None:
            self.max_turonver = max_turonver
        if gross_weight is not None:
            self.gross_weight = gross_weight
        if net_weight is not None:
            self.net_weight = net_weight
        if objective is not None:
            self.objective = objective
        if _lambda is not None:
            self._lambda = _lambda

    @property
    def target_risk(self):
        """Gets the target_risk of this OptimizationTemplate.  # noqa: E501

        Annualized Risk Target for optimization  # noqa: E501

        :return: The target_risk of this OptimizationTemplate.  # noqa: E501
        :rtype: float
        """
        return self._target_risk

    @target_risk.setter
    def target_risk(self, target_risk):
        """Sets the target_risk of this OptimizationTemplate.

        Annualized Risk Target for optimization  # noqa: E501

        :param target_risk: The target_risk of this OptimizationTemplate.  # noqa: E501
        :type: float
        """
        if target_risk is not None and target_risk > 10:  # noqa: E501
            raise ValueError("Invalid value for `target_risk`, must be a value less than or equal to `10`")  # noqa: E501
        if target_risk is not None and target_risk < 0.001:  # noqa: E501
            raise ValueError("Invalid value for `target_risk`, must be a value greater than or equal to `0.001`")  # noqa: E501

        self._target_risk = target_risk

    @property
    def bound(self):
        """Gets the bound of this OptimizationTemplate.  # noqa: E501

        Minimum and Maximum weight bound  # noqa: E501

        :return: The bound of this OptimizationTemplate.  # noqa: E501
        :rtype: list[float]
        """
        return self._bound

    @bound.setter
    def bound(self, bound):
        """Sets the bound of this OptimizationTemplate.

        Minimum and Maximum weight bound  # noqa: E501

        :param bound: The bound of this OptimizationTemplate.  # noqa: E501
        :type: list[float]
        """

        self._bound = bound

    @property
    def max_adv_participation(self):
        """Gets the max_adv_participation of this OptimizationTemplate.  # noqa: E501

        ADV Participation Ceiling (5% == 0.05)  # noqa: E501

        :return: The max_adv_participation of this OptimizationTemplate.  # noqa: E501
        :rtype: float
        """
        return self._max_adv_participation

    @max_adv_participation.setter
    def max_adv_participation(self, max_adv_participation):
        """Sets the max_adv_participation of this OptimizationTemplate.

        ADV Participation Ceiling (5% == 0.05)  # noqa: E501

        :param max_adv_participation: The max_adv_participation of this OptimizationTemplate.  # noqa: E501
        :type: float
        """
        if max_adv_participation is not None and max_adv_participation > 1:  # noqa: E501
            raise ValueError("Invalid value for `max_adv_participation`, must be a value less than or equal to `1`")  # noqa: E501
        if max_adv_participation is not None and max_adv_participation < 0.001:  # noqa: E501
            raise ValueError("Invalid value for `max_adv_participation`, must be a value greater than or equal to `0.001`")  # noqa: E501

        self._max_adv_participation = max_adv_participation

    @property
    def max_turonver(self):
        """Gets the max_turonver of this OptimizationTemplate.  # noqa: E501

        Maximum turnover allowed  # noqa: E501

        :return: The max_turonver of this OptimizationTemplate.  # noqa: E501
        :rtype: float
        """
        return self._max_turonver

    @max_turonver.setter
    def max_turonver(self, max_turonver):
        """Sets the max_turonver of this OptimizationTemplate.

        Maximum turnover allowed  # noqa: E501

        :param max_turonver: The max_turonver of this OptimizationTemplate.  # noqa: E501
        :type: float
        """
        if max_turonver is not None and max_turonver > 100:  # noqa: E501
            raise ValueError("Invalid value for `max_turonver`, must be a value less than or equal to `100`")  # noqa: E501
        if max_turonver is not None and max_turonver < 0.001:  # noqa: E501
            raise ValueError("Invalid value for `max_turonver`, must be a value greater than or equal to `0.001`")  # noqa: E501

        self._max_turonver = max_turonver

    @property
    def gross_weight(self):
        """Gets the gross_weight of this OptimizationTemplate.  # noqa: E501

        Total notional weight of the optimized basket  # noqa: E501

        :return: The gross_weight of this OptimizationTemplate.  # noqa: E501
        :rtype: float
        """
        return self._gross_weight

    @gross_weight.setter
    def gross_weight(self, gross_weight):
        """Sets the gross_weight of this OptimizationTemplate.

        Total notional weight of the optimized basket  # noqa: E501

        :param gross_weight: The gross_weight of this OptimizationTemplate.  # noqa: E501
        :type: float
        """
        if gross_weight is not None and gross_weight > 100:  # noqa: E501
            raise ValueError("Invalid value for `gross_weight`, must be a value less than or equal to `100`")  # noqa: E501
        if gross_weight is not None and gross_weight < 0.1:  # noqa: E501
            raise ValueError("Invalid value for `gross_weight`, must be a value greater than or equal to `0.1`")  # noqa: E501

        self._gross_weight = gross_weight

    @property
    def net_weight(self):
        """Gets the net_weight of this OptimizationTemplate.  # noqa: E501

        Net weight of the optimized basket. For Long/Short neutral the Net weight should be 0  # noqa: E501

        :return: The net_weight of this OptimizationTemplate.  # noqa: E501
        :rtype: float
        """
        return self._net_weight

    @net_weight.setter
    def net_weight(self, net_weight):
        """Sets the net_weight of this OptimizationTemplate.

        Net weight of the optimized basket. For Long/Short neutral the Net weight should be 0  # noqa: E501

        :param net_weight: The net_weight of this OptimizationTemplate.  # noqa: E501
        :type: float
        """
        if net_weight is not None and net_weight > 100:  # noqa: E501
            raise ValueError("Invalid value for `net_weight`, must be a value less than or equal to `100`")  # noqa: E501
        if net_weight is not None and net_weight < -100:  # noqa: E501
            raise ValueError("Invalid value for `net_weight`, must be a value greater than or equal to `-100`")  # noqa: E501

        self._net_weight = net_weight

    @property
    def objective(self):
        """Gets the objective of this OptimizationTemplate.  # noqa: E501


        :return: The objective of this OptimizationTemplate.  # noqa: E501
        :rtype: str
        """
        return self._objective

    @objective.setter
    def objective(self, objective):
        """Sets the objective of this OptimizationTemplate.


        :param objective: The objective of this OptimizationTemplate.  # noqa: E501
        :type: str
        """
        allowed_values = ["maxAlpha", "minRisk", "MVO"]  # noqa: E501
        if objective not in allowed_values:
            raise ValueError(
                "Invalid value for `objective` ({0}), must be one of {1}"  # noqa: E501
                .format(objective, allowed_values)
            )

        self._objective = objective

    @property
    def _lambda(self):
        """Gets the _lambda of this OptimizationTemplate.  # noqa: E501

        Risk aversion parameter, only used when objective is set as MVO  # noqa: E501

        :return: The _lambda of this OptimizationTemplate.  # noqa: E501
        :rtype: float
        """
        return self.__lambda

    @_lambda.setter
    def _lambda(self, _lambda):
        """Sets the _lambda of this OptimizationTemplate.

        Risk aversion parameter, only used when objective is set as MVO  # noqa: E501

        :param _lambda: The _lambda of this OptimizationTemplate.  # noqa: E501
        :type: float
        """

        self.__lambda = _lambda

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OptimizationTemplate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptimizationTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
