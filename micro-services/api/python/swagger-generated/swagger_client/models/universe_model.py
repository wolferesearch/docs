# coding: utf-8

"""
    QES Quant Service API

    QES Quant Service API provides easy access to Risk/Optimization API   # noqa: E501

    OpenAPI spec version: 0.0.4
    Contact: luo.qes@wolferesearch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UniverseModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'sector': 'str',
        'country': 'str',
        'description': 'str'
    }

    attribute_map = {
        'id': 'ID',
        'name': 'NAME',
        'sector': 'SECTOR',
        'country': 'COUNTRY',
        'description': 'DESCRIPTION'
    }

    def __init__(self, id=None, name=None, sector=None, country=None, description=None):  # noqa: E501
        """UniverseModel - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._sector = None
        self._country = None
        self._description = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if sector is not None:
            self.sector = sector
        if country is not None:
            self.country = country
        if description is not None:
            self.description = description

    @property
    def id(self):
        """Gets the id of this UniverseModel.  # noqa: E501

        Unique Indentifier  # noqa: E501

        :return: The id of this UniverseModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UniverseModel.

        Unique Indentifier  # noqa: E501

        :param id: The id of this UniverseModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this UniverseModel.  # noqa: E501

        Unique Name  # noqa: E501

        :return: The name of this UniverseModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UniverseModel.

        Unique Name  # noqa: E501

        :param name: The name of this UniverseModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def sector(self):
        """Gets the sector of this UniverseModel.  # noqa: E501

        Applicable Sector  # noqa: E501

        :return: The sector of this UniverseModel.  # noqa: E501
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """Sets the sector of this UniverseModel.

        Applicable Sector  # noqa: E501

        :param sector: The sector of this UniverseModel.  # noqa: E501
        :type: str
        """

        self._sector = sector

    @property
    def country(self):
        """Gets the country of this UniverseModel.  # noqa: E501

        Applicable Country or Geographic Region  # noqa: E501

        :return: The country of this UniverseModel.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this UniverseModel.

        Applicable Country or Geographic Region  # noqa: E501

        :param country: The country of this UniverseModel.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def description(self):
        """Gets the description of this UniverseModel.  # noqa: E501

        Descriptive Text  # noqa: E501

        :return: The description of this UniverseModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UniverseModel.

        Descriptive Text  # noqa: E501

        :param description: The description of this UniverseModel.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UniverseModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UniverseModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
