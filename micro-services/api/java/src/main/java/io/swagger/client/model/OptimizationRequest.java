/*
 * QES Quant Service API
 * QES Quant Service API provides easy access to Risk/Optimization API 
 *
 * OpenAPI spec version: 0.0.4
 * Contact: luo.qes@wolferesearch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * OptimizationRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-01-22T20:31:04.892Z")
public class OptimizationRequest {
  @SerializedName("portfolio")
  private String portfolio = null;

  @SerializedName("template")
  private String template = null;

  @SerializedName("startDate")
  private String startDate = null;

  @SerializedName("endDate")
  private String endDate = null;

  /**
   * Frequency of risk model generation
   */
  @JsonAdapter(FreqEnum.Adapter.class)
  public enum FreqEnum {
    _1ME("1me"),
    
    _1M("1m"),
    
    _1D("1d");

    private String value;

    FreqEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FreqEnum fromValue(String text) {
      for (FreqEnum b : FreqEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FreqEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FreqEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FreqEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FreqEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("freq")
  private FreqEnum freq = null;

  /**
   * Benchmark for Tracking error optimization problem - Any of the standard universes and portfolios can be used - as benchmark. The caller should provide the benchmark - mnemonic, e.g., QES_EUROPE, QES_WORLD, SP500. System uses - the Float weighting as benchmark.
   */
  @JsonAdapter(BenchmarkEnum.Adapter.class)
  public enum BenchmarkEnum {
    QES_EUROPE("QES_EUROPE"),
    
    QES_WORLD("QES_WORLD"),
    
    SP500("SP500");

    private String value;

    BenchmarkEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BenchmarkEnum fromValue(String text) {
      for (BenchmarkEnum b : BenchmarkEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<BenchmarkEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BenchmarkEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BenchmarkEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return BenchmarkEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("benchmark")
  private BenchmarkEnum benchmark = null;

  @SerializedName("transaction_cost")
  private BigDecimal transactionCost = null;

  public OptimizationRequest portfolio(String portfolio) {
    this.portfolio = portfolio;
    return this;
  }

   /**
   * Mnemonic of the portfolio to be optimized
   * @return portfolio
  **/
  @ApiModelProperty(value = "Mnemonic of the portfolio to be optimized")
  public String getPortfolio() {
    return portfolio;
  }

  public void setPortfolio(String portfolio) {
    this.portfolio = portfolio;
  }

  public OptimizationRequest template(String template) {
    this.template = template;
    return this;
  }

   /**
   * One of the previously defined templates for risk
   * @return template
  **/
  @ApiModelProperty(value = "One of the previously defined templates for risk")
  public String getTemplate() {
    return template;
  }

  public void setTemplate(String template) {
    this.template = template;
  }

  public OptimizationRequest startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Start date (yyyy-mm-dd)
   * @return startDate
  **/
  @ApiModelProperty(value = "Start date (yyyy-mm-dd)")
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }

  public OptimizationRequest endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * End date (yyyy-mm-dd)
   * @return endDate
  **/
  @ApiModelProperty(value = "End date (yyyy-mm-dd)")
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }

  public OptimizationRequest freq(FreqEnum freq) {
    this.freq = freq;
    return this;
  }

   /**
   * Frequency of risk model generation
   * @return freq
  **/
  @ApiModelProperty(value = "Frequency of risk model generation")
  public FreqEnum getFreq() {
    return freq;
  }

  public void setFreq(FreqEnum freq) {
    this.freq = freq;
  }

  public OptimizationRequest benchmark(BenchmarkEnum benchmark) {
    this.benchmark = benchmark;
    return this;
  }

   /**
   * Benchmark for Tracking error optimization problem - Any of the standard universes and portfolios can be used - as benchmark. The caller should provide the benchmark - mnemonic, e.g., QES_EUROPE, QES_WORLD, SP500. System uses - the Float weighting as benchmark.
   * @return benchmark
  **/
  @ApiModelProperty(value = "Benchmark for Tracking error optimization problem - Any of the standard universes and portfolios can be used - as benchmark. The caller should provide the benchmark - mnemonic, e.g., QES_EUROPE, QES_WORLD, SP500. System uses - the Float weighting as benchmark.")
  public BenchmarkEnum getBenchmark() {
    return benchmark;
  }

  public void setBenchmark(BenchmarkEnum benchmark) {
    this.benchmark = benchmark;
  }

  public OptimizationRequest transactionCost(BigDecimal transactionCost) {
    this.transactionCost = transactionCost;
    return this;
  }

   /**
   * Transaction cost  to consider in the optimization. - This is relevant for MVO optimization where transaction - cost is taken out from objective function. The transaction - cost is a quadratic function added based on value selected - For when the transaction_cost &#x3D; 1, about 1 median spread - is estimated as the cost when 7% of ADV is participated, - for when transaction_cost &#x3D; 5, 1 median spread cost is - estimated for when the participation is 3%. The per share - cost is linear and in objective function, the cost becomes - quadratic
   * maximum: 5
   * @return transactionCost
  **/
  @ApiModelProperty(value = "Transaction cost  to consider in the optimization. - This is relevant for MVO optimization where transaction - cost is taken out from objective function. The transaction - cost is a quadratic function added based on value selected - For when the transaction_cost = 1, about 1 median spread - is estimated as the cost when 7% of ADV is participated, - for when transaction_cost = 5, 1 median spread cost is - estimated for when the participation is 3%. The per share - cost is linear and in objective function, the cost becomes - quadratic")
  public BigDecimal getTransactionCost() {
    return transactionCost;
  }

  public void setTransactionCost(BigDecimal transactionCost) {
    this.transactionCost = transactionCost;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OptimizationRequest optimizationRequest = (OptimizationRequest) o;
    return Objects.equals(this.portfolio, optimizationRequest.portfolio) &&
        Objects.equals(this.template, optimizationRequest.template) &&
        Objects.equals(this.startDate, optimizationRequest.startDate) &&
        Objects.equals(this.endDate, optimizationRequest.endDate) &&
        Objects.equals(this.freq, optimizationRequest.freq) &&
        Objects.equals(this.benchmark, optimizationRequest.benchmark) &&
        Objects.equals(this.transactionCost, optimizationRequest.transactionCost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(portfolio, template, startDate, endDate, freq, benchmark, transactionCost);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OptimizationRequest {\n");
    
    sb.append("    portfolio: ").append(toIndentedString(portfolio)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    freq: ").append(toIndentedString(freq)).append("\n");
    sb.append("    benchmark: ").append(toIndentedString(benchmark)).append("\n");
    sb.append("    transactionCost: ").append(toIndentedString(transactionCost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

